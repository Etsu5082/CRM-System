import { PrismaClient } from '@prisma/client';
import { hashPassword } from '../src/utils/auth';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting database seeding...');

  // Create users
  const adminPassword = await hashPassword('Admin123!');
  const managerPassword = await hashPassword('Manager123!');
  const salesPassword = await hashPassword('Sales123!');
  const compliancePassword = await hashPassword('Compliance123!');

  const admin = await prisma.user.upsert({
    where: { email: 'admin@example.com' },
    update: {},
    create: {
      email: 'admin@example.com',
      password: adminPassword,
      name: 'ÁÆ°ÁêÜËÄÖÂ§™ÈÉé',
      role: 'ADMIN',
    },
  });

  const manager = await prisma.user.upsert({
    where: { email: 'manager@example.com' },
    update: {},
    create: {
      email: 'manager@example.com',
      password: managerPassword,
      name: '„Éû„Éç„Éº„Ç∏„É£„ÉºËä±Â≠ê',
      role: 'MANAGER',
    },
  });

  const sales1 = await prisma.user.upsert({
    where: { email: 'sales1@example.com' },
    update: {},
    create: {
      email: 'sales1@example.com',
      password: salesPassword,
      name: 'Âñ∂Ê•≠‰∏ÄÈÉé',
      role: 'SALES',
    },
  });

  const sales2 = await prisma.user.upsert({
    where: { email: 'sales2@example.com' },
    update: {},
    create: {
      email: 'sales2@example.com',
      password: salesPassword,
      name: 'Âñ∂Ê•≠Ê¨°ÈÉé',
      role: 'SALES',
    },
  });

  const compliance = await prisma.user.upsert({
    where: { email: 'compliance@example.com' },
    update: {},
    create: {
      email: 'compliance@example.com',
      password: compliancePassword,
      name: '„Ç≥„É≥„Éó„É©„Ç§„Ç¢„É≥„Çπ‰∏âÈÉé',
      role: 'COMPLIANCE',
    },
  });

  console.log('‚úÖ Users created');

  // Create customers
  const customer1 = await prisma.customer.upsert({
    where: { email: 'tanaka@example.com' },
    update: {},
    create: {
      name: 'Áî∞‰∏≠Â§™ÈÉé',
      email: 'tanaka@example.com',
      phone: '03-1234-5678',
      address: 'Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫1-1-1',
      investmentProfile: 'conservative',
      riskTolerance: 3,
      investmentExperience: '5Âπ¥',
      assignedSalesId: sales1.id,
    },
  });

  const customer2 = await prisma.customer.upsert({
    where: { email: 'suzuki@example.com' },
    update: {},
    create: {
      name: 'Èà¥Êú®Ëä±Â≠ê',
      email: 'suzuki@example.com',
      phone: '03-2345-6789',
      address: 'Êù±‰∫¨ÈÉΩÊ∏ØÂå∫2-2-2',
      investmentProfile: 'moderate',
      riskTolerance: 5,
      investmentExperience: '3Âπ¥',
      assignedSalesId: sales1.id,
    },
  });

  const customer3 = await prisma.customer.upsert({
    where: { email: 'sato@example.com' },
    update: {},
    create: {
      name: '‰ΩêËó§‰∏ÄÈÉé',
      email: 'sato@example.com',
      phone: '03-3456-7890',
      address: 'Êù±‰∫¨ÈÉΩÊ∏ãË∞∑Âå∫3-3-3',
      investmentProfile: 'aggressive',
      riskTolerance: 8,
      investmentExperience: '10Âπ¥',
      assignedSalesId: sales2.id,
    },
  });

  const customer4 = await prisma.customer.upsert({
    where: { email: 'yamada@example.com' },
    update: {},
    create: {
      name: 'Â±±Áî∞ÁæéÂí≤',
      email: 'yamada@example.com',
      phone: '03-4567-8901',
      address: 'Êù±‰∫¨ÈÉΩÊñ∞ÂÆøÂå∫4-4-4',
      investmentProfile: 'moderate',
      riskTolerance: 6,
      investmentExperience: '7Âπ¥',
      assignedSalesId: sales2.id,
    },
  });

  console.log('‚úÖ Customers created');

  // Create meetings
  await prisma.meeting.create({
    data: {
      customerId: customer1.id,
      salesId: sales1.id,
      date: new Date('2025-09-25'),
      summary: 'ÂàùÂõûÈù¢Ë´á„ÇíÂÆüÊñΩ„ÄÇÊäïË≥áÁõÆÊ®ô„ÇÑË≥áÁî£Áä∂Ê≥Å„Çí„Éí„Ç¢„É™„É≥„Ç∞„ÄÇ‰øùÂÆàÁöÑ„Å™ÈÅãÁî®„ÇíÂ∏åÊúõ„ÄÇ',
      nextAction: '‰Ωé„É™„Çπ„ÇØ„Éï„Ç°„É≥„Éâ„ÅÆÊèêÊ°àË≥áÊñô„Çí‰ΩúÊàê',
      nextActionDate: new Date('2025-10-05'),
    },
  });

  await prisma.meeting.create({
    data: {
      customerId: customer2.id,
      salesId: sales1.id,
      date: new Date('2025-09-28'),
      summary: '„Éù„Éº„Éà„Éï„Ç©„É™„Ç™Ë¶ãÁõ¥„ÅóÈù¢Ë´á„ÄÇÁèæÂú®„ÅÆÈÅãÁî®Áä∂Ê≥Å„ÇíÁ¢∫Ë™ç„Åó„ÄÅ„É™„Éê„É©„É≥„Çπ„ÇíÊèêÊ°à„ÄÇ',
      nextAction: '„É™„Éê„É©„É≥„ÇπÊèêÊ°àÊõ∏„ÅÆ‰ΩúÊàê„Å®ÊâøË™çÁî≥Ë´ã',
      nextActionDate: new Date('2025-10-08'),
    },
  });

  await prisma.meeting.create({
    data: {
      customerId: customer3.id,
      salesId: sales2.id,
      date: new Date('2025-09-27'),
      summary: 'Êñ∞Ë¶èÊäïË≥áÂïÜÂìÅ„ÅÆÊèêÊ°à„ÄÇÈ´ò„É™„Çπ„ÇØÈ´ò„É™„Çø„Éº„É≥„ÅÆÂïÜÂìÅ„Å´ËààÂë≥„ÅÇ„Çä„ÄÇ',
      nextAction: 'ÂïÜÂìÅË©≥Á¥∞Ë≥áÊñô„ÅÆÈÄÅ‰ªò„Å®Ê¨°ÂõûÈù¢Ë´áË®≠ÂÆö',
      nextActionDate: new Date('2025-10-10'),
    },
  });

  console.log('‚úÖ Meetings created');

  // Create tasks
  await prisma.task.create({
    data: {
      userId: sales1.id,
      customerId: customer1.id,
      title: 'Ê¨°Âõû„Ç¢„ÇØ„Ç∑„Éß„É≥: Áî∞‰∏≠Â§™ÈÉé',
      description: '‰Ωé„É™„Çπ„ÇØ„Éï„Ç°„É≥„Éâ„ÅÆÊèêÊ°àË≥áÊñô„Çí‰ΩúÊàê',
      dueDate: new Date('2025-10-05'),
      status: 'TODO',
      priority: 'MEDIUM',
    },
  });

  await prisma.task.create({
    data: {
      userId: sales1.id,
      customerId: customer2.id,
      title: 'Ê¨°Âõû„Ç¢„ÇØ„Ç∑„Éß„É≥: Èà¥Êú®Ëä±Â≠ê',
      description: '„É™„Éê„É©„É≥„ÇπÊèêÊ°àÊõ∏„ÅÆ‰ΩúÊàê„Å®ÊâøË™çÁî≥Ë´ã',
      dueDate: new Date('2025-10-08'),
      status: 'IN_PROGRESS',
      priority: 'HIGH',
    },
  });

  await prisma.task.create({
    data: {
      userId: sales2.id,
      customerId: customer3.id,
      title: 'Ê¨°Âõû„Ç¢„ÇØ„Ç∑„Éß„É≥: ‰ΩêËó§‰∏ÄÈÉé',
      description: 'ÂïÜÂìÅË©≥Á¥∞Ë≥áÊñô„ÅÆÈÄÅ‰ªò„Å®Ê¨°ÂõûÈù¢Ë´áË®≠ÂÆö',
      dueDate: new Date('2025-10-10'),
      status: 'TODO',
      priority: 'MEDIUM',
    },
  });

  await prisma.task.create({
    data: {
      userId: sales1.id,
      title: 'ÊúàÊ¨°„É¨„Éù„Éº„Éà‰ΩúÊàê',
      description: '9Êúà„ÅÆÂñ∂Ê•≠Ê¥ªÂãï„É¨„Éù„Éº„Éà„Çí‰ΩúÊàê',
      dueDate: new Date('2025-09-28'),
      status: 'TODO',
      priority: 'URGENT',
    },
  });

  await prisma.task.create({
    data: {
      userId: sales2.id,
      customerId: customer4.id,
      title: 'Â±±Áî∞Êßò„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„Éó',
      description: 'ÂâçÂõûÊèêÊ°àÂïÜÂìÅ„ÅÆÊ§úË®éÁä∂Ê≥ÅÁ¢∫Ë™ç',
      dueDate: new Date('2025-10-03'),
      status: 'TODO',
      priority: 'LOW',
    },
  });

  console.log('‚úÖ Tasks created');

  // Create approval requests
  await prisma.approvalRequest.create({
    data: {
      customerId: customer2.id,
      requesterId: sales1.id,
      productName: '„Éê„É©„É≥„ÇπÂûãÊäïË≥á‰ø°Ë®óA',
      amount: 5000000,
      comment: 'È°ßÂÆ¢„ÅÆ„É™„Çπ„ÇØË®±ÂÆπÂ∫¶„Å´Âêà„Çè„Åõ„Åü„Éê„É©„É≥„ÇπÂûã„Éï„Ç°„É≥„Éâ„ÇíÊèêÊ°à„Åó„Åæ„Åô„ÄÇ',
      status: 'PENDING',
    },
  });

  await prisma.approvalRequest.create({
    data: {
      customerId: customer3.id,
      requesterId: sales2.id,
      productName: '„Ç∞„É≠„Éº„ÇπÊ†™Âºè„Éï„Ç°„É≥„ÉâB',
      amount: 10000000,
      comment: 'È´òÊàêÈï∑„ÅåÊúüÂæÖ„Åß„Åç„ÇãÊ†™Âºè‰∏≠ÂøÉ„ÅÆ„Éï„Ç°„É≥„Éâ„Åß„Åô„ÄÇÈ°ßÂÆ¢„ÅÆÊäïË≥áÁµåÈ®ì„ÇÇË±äÂØå„Åß„Åô„ÄÇ',
      status: 'PENDING',
    },
  });

  await prisma.approvalRequest.create({
    data: {
      customerId: customer1.id,
      requesterId: sales1.id,
      productName: 'ÂÇµÂà∏Âûã„Éï„Ç°„É≥„ÉâC',
      amount: 3000000,
      comment: 'ÂÆâÂÆöÈÅãÁî®„ÇíÂ∏åÊúõ„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅÂÇµÂà∏‰∏≠ÂøÉ„ÅÆ‰Ωé„É™„Çπ„ÇØÂïÜÂìÅ„ÇíÊèêÊ°à„Åó„Åæ„Åô„ÄÇ',
      status: 'APPROVED',
      approverId: manager.id,
      processedAt: new Date('2025-09-29'),
    },
  });

  console.log('‚úÖ Approval requests created');

  console.log('üéâ Database seeding completed!');
  console.log('\nüìù Test accounts:');
  console.log('Admin:      admin@example.com      / Admin123!');
  console.log('Manager:    manager@example.com    / Manager123!');
  console.log('Sales:      sales1@example.com     / Sales123!');
  console.log('Sales:      sales2@example.com     / Sales123!');
  console.log('Compliance: compliance@example.com / Compliance123!');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå Seeding failed:', e);
    await prisma.$disconnect();
    process.exit(1);
  });