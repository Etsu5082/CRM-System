// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  SALES
  COMPLIANCE
}

enum InvestmentProfile {
  conservative
  moderate
  aggressive
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  RECALLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(SALES)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customersAssigned   Customer[]        @relation("AssignedSales")
  meetings            Meeting[]
  tasks               Task[]
  approvalRequests    ApprovalRequest[] @relation("Requester")
  approvalsProcessed  ApprovalRequest[] @relation("Approver")
  auditLogs           AuditLog[]

  @@map("users")
}

model Customer {
  id                    String            @id @default(cuid())
  name                  String
  email                 String            @unique
  phone                 String?
  address               String?
  investmentProfile     InvestmentProfile
  riskTolerance         Int               @default(5) // 1-10 scale
  investmentExperience  String?
  assignedSalesId       String
  deletedAt             DateTime?         // Soft delete
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  assignedSales    User                @relation("AssignedSales", fields: [assignedSalesId], references: [id])
  meetings         Meeting[]
  tasks            Task[]
  approvalRequests ApprovalRequest[]

  @@index([assignedSalesId])
  @@index([email])
  @@index([investmentProfile])
  @@map("customers")
}

model Meeting {
  id          String   @id @default(cuid())
  customerId  String
  salesId     String
  date        DateTime
  summary     String
  nextAction  String?
  nextActionDate DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sales       User     @relation(fields: [salesId], references: [id])

  @@index([customerId])
  @@index([salesId])
  @@index([date])
  @@map("meetings")
}

model Task {
  id          String       @id @default(cuid())
  userId      String
  customerId  String?
  title       String
  description String?
  dueDate     DateTime
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  completedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([customerId])
  @@index([dueDate])
  @@index([status])
  @@map("tasks")
}

model ApprovalRequest {
  id          String         @id @default(cuid())
  requesterId String
  approverId  String?
  customerId  String
  productName String
  amount      Float
  status      ApprovalStatus @default(PENDING)
  comment     String?
  requestedAt DateTime       @default(now())
  processedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  requester   User     @relation("Requester", fields: [requesterId], references: [id])
  approver    User?    @relation("Approver", fields: [approverId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([requesterId])
  @@index([approverId])
  @@index([customerId])
  @@index([status])
  @@map("approval_requests")
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String
  action       String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  resourceType String   // Customer, Meeting, Task, etc.
  resourceId   String?
  changes      Json?    // Before/after data
  ipAddress    String?
  timestamp    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([resourceType])
  @@index([timestamp])
  @@map("audit_logs")
}