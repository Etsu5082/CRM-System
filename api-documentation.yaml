openapi: 3.0.0
info:
  title: マイクロサービスCRM API
  version: 1.0.0
  description: 金融業界向けエンタープライズCRMシステムAPI
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000/api
    description: Development (via API Gateway)
  - url: http://localhost:3100
    description: Auth Service Direct
  - url: http://localhost:3101
    description: Customer Service Direct

tags:
  - name: Authentication
    description: 認証・認可関連
  - name: Customers
    description: 顧客管理
  - name: Sales Activities
    description: 営業活動管理
  - name: Opportunities
    description: 案件管理
  - name: Analytics
    description: 分析・レポート

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Error message

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [ADMIN, MANAGER, SALES, COMPLIANCE]
        createdAt:
          type: string
          format: date-time

    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        investmentProfile:
          type: string
          enum: [conservative, moderate, aggressive]
        riskTolerance:
          type: integer
          minimum: 1
          maximum: 10
        assignedSalesId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: ログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: 現在のユーザー情報取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: 未認証
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customers:
    get:
      tags:
        - Customers
      summary: 顧客一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '401':
          description: 未認証
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Customers
      summary: 顧客作成
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - investmentProfile
                - riskTolerance
                - assignedSalesId
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                address:
                  type: string
                investmentProfile:
                  type: string
                  enum: [conservative, moderate, aggressive]
                riskTolerance:
                  type: integer
                  minimum: 1
                  maximum: 10
                investmentExperience:
                  type: string
                assignedSalesId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 未認証
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: 顧客詳細取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: 顧客が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Customers
      summary: 顧客更新
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                address:
                  type: string
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

    delete:
      tags:
        - Customers
      summary: 顧客削除（ソフトデリート）
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 削除成功
        '404':
          description: 顧客が見つかりません

  /reports/sales-summary:
    get:
      tags:
        - Analytics
      summary: 営業サマリーレポート
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCustomers:
                    type: integer
                  totalMeetings:
                    type: integer
                  totalTasks:
                    type: integer
                  totalApprovals:
                    type: integer
                  pendingApprovals:
                    type: integer
                  completedTasks:
                    type: integer
                  generatedAt:
                    type: string
                    format: date-time

  /health:
    get:
      tags:
        - System
      summary: ヘルスチェック
      responses:
        '200':
          description: システム正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  service:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  checks:
                    type: object
                    properties:
                      database:
                        type: object
                        properties:
                          status:
                            type: string
                      kafka:
                        type: object
                      redis:
                        type: object
        '503':
          description: サービス異常
